// <auto-generated />
using System;
using AdministrationAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdministrationAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("AdministrationAPI.Models.ActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("ActivatedEmail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activated_email");

                    b.Property<bool>("ActivatedSMS")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activated_sms");

                    b.Property<string>("EmailCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email_code");

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("sms_code");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("usr_activation_codes", (string)null);
                });

            modelBuilder.Entity("AdministrationAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("AuthenticatorKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("authenticator_key");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("usr_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11883f4b-00d9-4872-abde-abe721f146cf",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "kfejzic1@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Testing",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "KFEJZIC1@ETF.UNSA.BA",
                            NormalizedUserName = "TESTINGUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "062229993",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "aceffea9-f023-4983-b9ef-4663e0aebbf1",
                            TwoFactorEnabled = true,
                            UserName = "testingUser"
                        },
                        new
                        {
                            Id = "3ba056f9-62b5-4839-b0ac-5876a9dc1b56",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "fejza2806@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FEJZA2806@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "062518214",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "6545f3f9-2052-4a7c-983b-2c58aaf03c0d",
                            TwoFactorEnabled = false,
                            UserName = "adminUser"
                        },
                        new
                        {
                            Id = "3df29f63-96af-4184-a182-0f612847e58f",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "esmajic2@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Elvedin",
                            LastName = "Smajic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESMAJIC2@ETF.UNSA.BA",
                            NormalizedUserName = "ESMAJIC2",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d0495148-75d2-4b16-8d83-f270e135fa59",
                            TwoFactorEnabled = true,
                            UserName = "esmajic2"
                        },
                        new
                        {
                            Id = "2c5cd97c-1352-46a3-9ad7-7c805daa4911",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "amehmedagi1@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Admir",
                            LastName = "Mehmedagic",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMEHMEDAGI1@ETF.UNSA.BA",
                            NormalizedUserName = "AMEHMEDAGI1",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "92b00e76-aef2-4d62-a930-8b297faf5fb5",
                            TwoFactorEnabled = true,
                            UserName = "amehmedagi1"
                        },
                        new
                        {
                            Id = "eb70f744-ae6b-4473-9121-fbbfc3fbb3c1",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "mbecirovic3@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Merjem",
                            LastName = "Becirovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MBECIROVIC3@ETF.UNSA.BA",
                            NormalizedUserName = "MBECIROVIC3",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1bdda705-56d1-45cc-9363-071f3bf2b997",
                            TwoFactorEnabled = true,
                            UserName = "mbecirovic3"
                        },
                        new
                        {
                            Id = "af81a387-b601-42cb-98a5-1475a70f146b",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "dmuhic1@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Dzenis",
                            LastName = "Muhic",
                            LockoutEnabled = false,
                            NormalizedEmail = "DMUHIC1@ETF.UNSA.BA",
                            NormalizedUserName = "DMUHIC1",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b9d40827-726e-44ab-adeb-04e07832f1cf",
                            TwoFactorEnabled = true,
                            UserName = "dmuhic1"
                        },
                        new
                        {
                            Id = "e3d6eb21-5477-49a3-9d78-00e92d6a6a03",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "emekic2@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Ema",
                            LastName = "Mekic",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMEKIC2@ETF.UNSA.BA",
                            NormalizedUserName = "EMEKIC2",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "48222cb3-c3a3-4b44-9463-ec0024505162",
                            TwoFactorEnabled = true,
                            UserName = "emekic2"
                        },
                        new
                        {
                            Id = "6be9d199-76c4-40d0-967f-ff572f93264f",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "abrulic1@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Almina",
                            LastName = "Brulic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABRULIC1@ETF.UNSA.BA",
                            NormalizedUserName = "ABRULIC1",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "353eefc9-2638-4049-b866-cba739537240",
                            TwoFactorEnabled = true,
                            UserName = "abrulic1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("usr_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "355683d5-97cf-44fd-8d79-0fbc005e5642",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "f1331f8f-5ba1-4303-bfc7-33c64b7346d7",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("usr_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("usr_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("usr_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("usr_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("usr_user_tokens", (string)null);
                });

            modelBuilder.Entity("AdministrationAPI.Models.ActivationCode", b =>
                {
                    b.HasOne("AdministrationAPI.Models.User", "User")
                        .WithOne("ActivationCode")
                        .HasForeignKey("AdministrationAPI.Models.ActivationCode", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdministrationAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdministrationAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdministrationAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdministrationAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdministrationAPI.Models.User", b =>
                {
                    b.Navigation("ActivationCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
