// <auto-generated />
using System;
using AdministrationAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdministrationAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("AdministrationAPI.Models.ActivationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<bool>("ActivatedEmail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activated_email");

                    b.Property<bool>("ActivatedSMS")
                        .HasColumnType("INTEGER")
                        .HasColumnName("activated_sms");

                    b.Property<string>("EmailCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email_code");

                    b.Property<string>("SMSCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("sms_code");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("usr_activation_codes", (string)null);
                });

            modelBuilder.Entity("AdministrationAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("AuthenticatorKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("authenticator_key");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("usr_users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c76f848c-890e-40fd-837e-03d0f78d29fc",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "kfejzic1@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Testing",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "KFEJZIC1@ETF.UNSA.BA",
                            NormalizedUserName = "TESTINGUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "062229993",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "78e93e59-2082-4c7d-8e01-a8354facdcd6",
                            TwoFactorEnabled = true,
                            UserName = "testingUser"
                        },
                        new
                        {
                            Id = "4473f112-e2f4-479c-9eb5-87219e140e8c",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "fejza2806@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "FEJZA2806@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "062518214",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a5e1d977-edb4-4d71-8a39-9aa47ef262f5",
                            TwoFactorEnabled = false,
                            UserName = "adminUser"
                        },
                        new
                        {
                            Id = "123748fa-398e-4aec-bd08-b81a3e6f3c7b",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "esmajic2@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Elvedin",
                            LastName = "Smajic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESMAJIC2@ETF.UNSA.BA",
                            NormalizedUserName = "ESMAJIC2",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0259c9a5-4ecd-41f5-9bab-eedc6a28edc6",
                            TwoFactorEnabled = true,
                            UserName = "esmajic2"
                        },
                        new
                        {
                            Id = "5139ee3a-1d2d-4ab1-9b05-78cee0755a44",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "amehmedagi1@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Admir",
                            LastName = "Mehmedagic",
                            LockoutEnabled = false,
                            NormalizedEmail = "AMEHMEDAGI1@ETF.UNSA.BA",
                            NormalizedUserName = "AMEHMEDAGI1",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4d35694f-07a7-4dca-93d7-2f100b4c9d50",
                            TwoFactorEnabled = true,
                            UserName = "amehmedagi1"
                        },
                        new
                        {
                            Id = "cc971a0d-4a3e-4859-8493-0a212e5b0753",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "mbecirovic3@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Merjem",
                            LastName = "Becirovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "MBECIROVIC3@ETF.UNSA.BA",
                            NormalizedUserName = "MBECIROVIC3",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2b70419b-daf8-4301-90bc-634bb2b74a24",
                            TwoFactorEnabled = true,
                            UserName = "mbecirovic3"
                        },
                        new
                        {
                            Id = "dd7bcfbd-3058-4e66-a20a-f37114c8a88b",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "dmuhic1@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Dzenis",
                            LastName = "Muhic",
                            LockoutEnabled = false,
                            NormalizedEmail = "DMUHIC1@ETF.UNSA.BA",
                            NormalizedUserName = "DMUHIC1",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "45c36932-12ba-496c-83bc-874f3408ddc8",
                            TwoFactorEnabled = true,
                            UserName = "dmuhic1"
                        },
                        new
                        {
                            Id = "0687653a-3cbe-4966-b37b-0b005180921c",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "emekic2@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Ema",
                            LastName = "Mekic",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMEKIC2@ETF.UNSA.BA",
                            NormalizedUserName = "EMEKIC2",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "520aa5be-42a7-45c5-9d18-da97718d782a",
                            TwoFactorEnabled = true,
                            UserName = "emekic2"
                        },
                        new
                        {
                            Id = "fdc85627-b368-461e-a4f0-59bf9136ac57",
                            AccessFailedCount = 0,
                            Address = "Tamo negdje 1",
                            ConcurrencyStamp = "1",
                            Email = "abrulic1@etf.unsa.ba",
                            EmailConfirmed = true,
                            FirstName = "Almina",
                            LastName = "Brulic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABRULIC1@ETF.UNSA.BA",
                            NormalizedUserName = "ABRULIC1",
                            PasswordHash = "AQAAAAIAAYagAAAAENao66CqvIXroh/6aTaoJ/uThFfjLemBtjLfuiJpP/NoWXkhJO/G8wspnWhjLJx9WQ==",
                            PhoneNumber = "11111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a7572e75-48c7-491e-acca-213c9db9611a",
                            TwoFactorEnabled = true,
                            UserName = "abrulic1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("usr_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7feca994-c40b-4f3b-a456-85d4b931241d",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "9f83508d-16fc-4f53-b4bb-ad2fad15c45f",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("usr_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("usr_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("usr_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("usr_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("usr_user_tokens", (string)null);
                });

            modelBuilder.Entity("AdministrationAPI.Models.ActivationCode", b =>
                {
                    b.HasOne("AdministrationAPI.Models.User", "User")
                        .WithOne("ActivationCode")
                        .HasForeignKey("AdministrationAPI.Models.ActivationCode", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdministrationAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdministrationAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdministrationAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdministrationAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdministrationAPI.Models.User", b =>
                {
                    b.Navigation("ActivationCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
